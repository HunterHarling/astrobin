global
  # maximum number of simultaneous active connections
  maxconn 5000

  # run in the background (duh)
  daemon

  # for restarts
  pidfile /var/run/haproxy.pid

  # Logging to syslog facility local0
  log   127.0.0.1       local0
  stats socket /var/run/haproxy.stat mode 777

  # Distribute the health checks with a bit of randomness
  spread-checks 5

  # Uncomment the statement below to turn on verbose logging
  #debug

# Settings in the defaults section apply to all services (unless you change it,
# this configuration defines one service, called rails).
defaults
  # apply log settings from the global section above to services
  log global

  # Proxy incoming traffic as HTTP requests
  mode http

  # Unfortunately, per the haproxy docs, connection-based load balancing is
  # not a good strategy for HTTP
  balance roundrobin

  # Maximum number of simultaneous active connections from an upstream web server
  # per service
  maxconn 25000

  # Log details about HTTP requests
  option httplog

  # Abort request if client closes its output channel while waiting for the 
  # request. HAProxy documentation has a long explanation for this option.
  option abortonclose

  # Check if a "Connection: close" header is already set in each direction,
  # and will add one if missing. Also add X-Forwarded-For header
  option httpclose
  option forwardfor 

  # If sending a request to one server fails, try to send it to another, 3 times
  # before aborting the request
  retries 3

  # Do not enforce session affinity (i.e., an HTTP session can be served by 
  # any Mongrel, not just the one that started the session
  option redispatch

  # Keep timeouts at web speed, since this balancer sits in front of everything
  # Backends will force timeout faster if needed.
  timeout client  30s
  timeout connect 30s
  timeout server  30s

  # For the frontend balancer, check the health of haproxy monitor URL.
  # This avoids a double-check; haproxy will say 503 if backends are 503
  option tcp-check

  # Amount of time after which a health check is considered to have timed out
  timeout check 5s

  # Enable the statistics page
  stats enable
  stats uri     /haproxy?stats
  stats realm   Haproxy\ Statistics
  stats auth    admin:admin
  stats refresh 5s

frontend http-webservices
  bind 0.0.0.0:80
  default_backend app

backend app
  server app1 app1:8083 check inter 5s
  server app2 app2:8083 check inter 5s
