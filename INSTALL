# Creating chroot:
# ================
sudo apt-get install dchroot debootstrap
mkdir -r ~/chroots/astrobin

Append the following to /etc/schroo/schroot.conf:

[astrobin]
description=AstroBin
location=/home/siovene/chroots/astrobin
priority=3
users=siovene
groups=sbuild
root-groups=root

cd ~/chroots
sudo debootstrap --variant=buildd --arch i386 raring astrobin/ http://mirrors.nic.funet.fi/ubuntu/

In the chroot, edit /etc/apt/sources.list:

deb http://mirrors.nic.funet.fi/ubuntu raring main
deb http://archive.canonical.com/ubuntu raring partner
deb http://extras.ubuntu.com/ubuntu raring main
deb http://fi.archive.ubuntu.com/ubuntu raring universe

Use the following script in ~/chroots to prepare the chroot:

#!/bin/bash

ECHO="echo -e"
CP="cp -r"
MKDIR="mkdir -p"

if [ $# -eq 0 ]; then
    $ECHO "Usage: $0 <user>"
    $ECHO "\t <user>: The user that will be created in the chroot: must match a
                 user in the host system."
    exit 1
fi

if [ $EUID != 0 ]; then
    sudo "$0" "$@"
    exit $?
fi

if id -u $1 >/dev/null 2>&1; then
    $ECHO "Preparing chroots for user $1..."
else
    $ECHO "User $1 does not exist."
    exit 2
fi

for i in *; do
    if [ -d "$i" ]; then
        $ECHO "Processing $i:"
        if mount | grep "$i/proc" > /dev/null; then
            $ECHO "\t* Skipping mount /proc..."
        else
            $ECHO "\t* Mounting /proc..."
            mount -o bind /proc $i/proc
        fi

        $ECHO "\t* Copying resolv.conf..."
        $CP /etc/resolv.conf $i/etc/

        if id -u $1 >/dev/null 2>&1 2>&1; then
            $ECHO "\t* Skipping user creation..."
        else
            $ECHO "\t* Creating user..."
            chroot $i /bin/bash -c "useradd --create-home --shell /bin/bash $1"
        fi

        $ECHO "\t* Copying SSH keys..."
        $MKDIR $i/home/$1/.ssh
        $CP /home/$1/.ssh/id_rsa.pub $i/home/$1/.ssh/
        $CP /home/$1/.ssh/id_rsa $i/home/$1/.ssh/
        chown siovene:siovene $i/home/$1/.ssh/*

        $ECHO "\t* Copying git config..."
        $CP /home/$1/.gitconfig $i/home/$1/

        $ECHO "\t* Preparing locales..."
        chroot $i /bin/bash -c "locale-gen en_US.UTF-8 > /dev/null 2>&1;
                                dpkg-reconfigure locales > /dev/null 2>&1"
    fi
done

$ECHO "All done."


Use the following script to enter the chroot:

#!/bin/bash

if [ $# -eq 0 ]; then
    echo "Usage: $0 chroot_name."
    exit 1
fi

if [ $EUID != 0 ]; then
    sudo "$0" "$@"
    exit $?
fi

chroot $1


# Distribution packages:
# ======================

sudo apt-get update
sudo apt-get install \
	apt-file \
	vim \
	git \
	mercurial \
	python2.7-dev \
	memcached \
	rabbitmq-server \
	python-pip \
	build-essential \
	uuid-dev \
	libpcre3-dev \
	libcairo2-dev \
	libjpeg8-dev \
	netpbm \
	libnetpbm10-dev \
	python-numpy \
	gettext \
	python-egenix-mxdatetime \
	supervisor \
	gcc-4.4 \
	libxslt1-dev \
	libxml2-dev \
	nginx \
	node-less \
	libpq-dev \
	postgresql \
	sudo \
	cmake \
	qt4-qmake \
	libqt4-dev

sudo apt-file update
sudo pip install virtualenv

# Obtain the code:
# ================

cd
mkdir ~/code && cd ~/code
git clone https://bitbucket.org/siovene/astrobin astrobin
cd astrobin
git submodule init
git submodule update


# Python packages:
# ================

cd; mkdir venv
virtualenv --no-site-packages venv/astrobin/production
. ~/venv/astrobin/production/bin/activate

./install_submodules.sh
pip install -r requirements.txt


# NOTE: if you run into this: https://github.com/ask/celery/commit/edf3b3f33acdada9264754068d9c74ee76692cd9
# then install kombu, celery and django-celery from git master:
#
# git clone https://github.com/ask/kombu.git
# git clone https://github.com/ask/celery.git
# git clone https://github.com/ask/django-celery.git
# cd kombu; ../astrobin/venv/bin/python setup.py install; cd ..
# cd celery; ../astrobin/venv/bin/python setup.py install; cd ..
# cd django-celery; ../astrobin/venv/bin/python setup.py install; cd ..

# for the notifications system


# Set up Postgresql:
# ==================

sudo -u postgres createuser  (n/y/n)
sudo -u postgres createdb astrobin
sudo -u postgres createdb astrobin_questions_en
sudo -u postgres createdb pootle
sudo -u postgres psql
alter user astrobin with encrypted password 's3cr3t';
grant all privileges on database astrobin to astrobin;
grant all privileges on database astrobin_questions_en to astrobin;
grant all privileges on database pootle to astrobin;

Edit /etc/postgresql/9.1/main/pg_hba.conf and set 127.0.01 from 'md5' to 'trust'.

# Initialize db
./scripts/syncdb.sh
./manage.py migrate threaded_messages

(When asked, do create super user astrobin:h3C_U77a <astrobin@astrobin.com>)


# Use nginx config
Add 'include /home/astrobin/code/astrobin/astrobin.com.nginx;' to the http{} section of /etc/nginx/nginx.conf.

Also set these in the same file:

To the http section:
    client_max_body_size 20m;

To the top:
    worker_processes 4;
    worker_rlimit_nofile 20480;


# Configure rabbitmq:
# ===================

sudo rabbitmqctl add_user astrobin h3C_U77a
sudo rabbitmqctl add_vhost astrobin
sudo rabbitmqctl set_permissions -p astrobin astrobin ".*" ".*" ".*"


# Configure Solr:
# ===============

sudo mkdir /opt/solr
cd /opt/solr
sudo curl -O http://www.nic.funet.fi/pub/mirrors/apache.org/lucene/solr/4.0.0-BETA/apache-solr-4.0.0-BETA.tgz
sudo tar xvfz apache-solr-4.0.0-BETA.tgz

./manage.py build_solr_schema > solr_schema.xml
sudo mv solr_schema.xml /opt/solr/apache-solr-4.0.0-BETA/example/solr/collection1/conf/schema.xml
sudo echo ".level = WARNING" > /opt/solr/apache-solr-4.0.0-BETA/example/solr-logging.properties
sudo cp conf/supervisord/solr.conf /etc/supervisor/conf.d/
sudo mkdir /var/log/solr


# Set up supervisor
cd ~/Code/astrobin
sudo cp conf/supervisord/* /etc/supervisor/conf.d/
sudo mkdir /var/log/{celery,gunicorn,nginx,pootle}

# Run it!
# =======
sudo /etc/init.d/supervisord start
sudo supervisorctl start all


# Build index:
# ============

./scripts/rebuild_index.sh

# Add new language:
# =================
cd astrobin;
../venv/bin/django-admin.py makemessages -l se -e txt,html,py # Example for swedish


# Compile languages:
cd astrobin;
../venv/bin/django-admin.py compilemessages


# Set site name:
# ==============

Go to: http://localhost/admin/sites/site/1/

and set site's properties.

# Create groups:
# ==============

AstroBin needs some groups for the affiliate program:

    * Producers
    * Retailers
    * Paying

    * affiliate-1   (EUR 9.90) / 9.90
    * affiliate-10  (EUR 19.90) / 1.99
    * affiliate-50  (EUR 39.90) / 0.79
    * affiliate-100 (EUR 59.90) / 0.59
    * affiliate-inf (EUR 99.90) / ~0.00

    * retailer-affiliate-1   (EUR 9.90) / 9.90
    * retailer-affiliate-10  (EUR 19.90) / 1.99
    * retailer-affiliate-50  (EUR 39.90) / 0.79
    * retailer-affiliate-100 (EUR 59.90) / 0.59
    * retailer-affiliate-inf (EUR 99.90) / ~0.00

And some for the Raw Data platform:

    * rawdata-meteor  (USD 2,90)
    * rawdata-luna    (USD 9,90)
    * rawdata-sol     (USD 19,90)
    * rawdata-galaxia (USD 49,90)

For the donations:

    * astrobin-donor-coffee-monthly
    * astrobin-donor-snack-monthly
    * astrobin-donor-pizza-monthly
    * astrobin-donor-movie-monthly
    * astrobin-donor-dinner-monthly
    * astrobin-donor-coffee-yearly
    * astrobin-donor-snack-yearly
    * astrobin-donor-pizza-yearly
    * astrobin-donor-movie-yearly
    * astrobin-donor-dinner-yearly


# (replace gunicorn.sh with run.sh if you want to debug)
sudo supervisorctl stop gunicorn
./scripts/run.sh


Go to http://localhost/


# Restart gunicorn
# ================
kill -HUP `cat astrobin.pid`


# Run tasks regularly:
# ====================

# Update images index
*/10 * * * * (cd ~/Code/astrobin; ./scripts/update_index.sh) 2>&1 >/dev/null
# Send weekly reminders
59 23 * * 6 (cd ~/Code/astrobin; ./manage.py lacking_data_reminder) 2>&1 >/dev/null


# Pootle
# ======
install translate-toolkit 1.9 from sources
install pootle 2.1.6 from sources
place Pootle-2.1.6 into ~/Code
install python-Levenshtein via pip
install flup via pip

create database pootle character set utf8;
venv/bin/Pootleserver

~/Code/Pootle-2.1.6$ ../astrobin/venv/bin/python ./manage.py runfcgi host=127.0.0.1 port=8080

